<launch>

    <!-- Setup environment -->
    <arg name="machine_bot" default = "remote"/>
    <arg name="machine_c2i" default = "local"/>
    <arg name="ip_bot" default = "kc-RPi3-mate.local"/>
    <arg name="ip_c2i" default = "kc.local"/>
    <arg name="machine_bot_user" default = "keshavchintamani"/>
    <arg name="machine_c2i_user" default = "kc"/>
    <arg name="depth_camera" default="trinibot/ds525" />
    <!-- Parameters -->
    <!--<param name="target_frame" type="string" value="lazer_frame" />-->
    <param name="ds_camera/publish_tf" type="bool" value="false" />

    <rosparam param="port">'/dev/ttyACM0'</rosparam>
    <rosparam param="pid_gains">[100, 1, 1]</rosparam>

    <rosparam param="angular_scale">0.1</rosparam>
    <rosparam param="linear_scale">0.1</rosparam>
    <rosparam param="angular_accel">0.5</rosparam>
    <rosparam param="linear_accel">0.5</rosparam>
    <rosparam param="max_linear_velocity">0.1</rosparam>
    <rosparam param="max_angular_velocity">1</rosparam>

    <rosparam param="pose_covariance">[0.000001229025,0,0,0,0,0,
        0.00000153288,0.00000246712,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0.000055113379,0.000082362812,0,0,0,0.002917678005]
    </rosparam>

    <rosparam param="twist_covariance">[0.0000003945578231,0,0,0,0,0,
        0.0000001768707483,0.0000005850340136,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0,0,0,0,0,0,
        0.000005217687075,0.00000687755102,0,0,0,0.0001468163265]
    </rosparam>

    <rosparam param="imu_gyro_covariance">[0.000, 0.000, 0.000,
                                    0.000, 0.000, 0.000,
                                    0.000, 0.000, 0.000]
    </rosparam>

    <!--[0.001, 0.001, 0.001,-->
                                    <!--0.001, 0.001, 0.001,-->
                                    <!--0.001, 0.001, 0.001]-->
    <rosparam param="imu_ang_covariance">[0.000, 0.000, 0.000,
                                    0.000, 0.000, 0.000,
                                    0.000, 0.000, 0.000]</rosparam>
    <rosparam param="imu_acc_covariance">[0.000, 0.000, 0.000,
                                    0.000, 0.000, 0.000,
                                    0.000, 0.000, 0.000]</rosparam>

    <machine name="$(arg machine_c2i)"
             address="$(arg ip_c2i)"
             user="$(arg machine_c2i_user)"
             env-loader="/home/kc/sandbox/external-rospacks/src/trinibot_core/laptop_envloader.sh"
             timeout="10.0"
              >
    </machine>
    <machine name="$(arg machine_bot)"
             address="$(arg ip_bot)"
             user="$(arg machine_bot_user)"
             env-loader="/home/keshavchintamani/trinibot_ws/src/trinibot_core/pi_envloader.sh"
             timeout="10.0"
              >
    </machine>

    <!-- Geometry-->
    <node pkg="trinibot_core" type="tbplatformtransform.py" name="tbplatformtransforms" machine="$(arg machine_c2i)" respawn="false" output="screen">
    </node>

    <node pkg="trinibot_core" type="tbsensehat.py" name="sensehat"  machine="$(arg machine_bot)" respawn="false" />

    <!-- Motion control-->
    <node pkg="trinibot_core" type="tbvelocityramper.py" name="tbvelocityramper" machine="$(arg machine_c2i)" respawn="false" output="screen">
    </node>
    <node pkg="trinibot_core" type="tbmotioncontroller.py" name="robotcontroller" machine="$(arg machine_c2i)" respawn="false" output="screen">
        <remap from="/velocity_cmd" to="/cmd_vel_ramped"  />
        <remap from="/string_cmd" to= "/trinibot_gui/string_cmd"  />

    </node>

    <!--GUI-->
    <node pkg="trinibot_core" type="tbteleopgui.py" name="teleoperation_gui" machine="$(arg machine_c2i)" respawn="false" output="screen" />

    <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="teleoperation" machine="$(arg machine_c2i)" respawn="false" output="screen" />


  <!--  &lt;!&ndash;<node pkg="rviz" type="rviz" name="RViz"   machine="$(arg machine_c2i)" respawn="false" />-->
    <!--<rosparam command="load" file="$(find trinibot_core)/params/tb_ekf.yaml" />-->
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" machine="$(arg machine_c2i)" clear_params="false">
         <rosparam>
                # The frequency, in Hz, at which the filter will output a position estimate. Note that the filter will not begin
                # computation until it receives at least one message from one of the inputs. It will then run continuously at the
                # frequency specified here, regardless of whether it receives more measurements. Defaults to 30 if unspecified.
                frequency: 10

                # ekf_localization_node and ukf_localization_node both use a 3D omnidirectional motion model. If this parameter is
                # set to true, no 3D information will be used in your state estimate. Use this if you are operating in a planar
                # environment and want to ignore the effect of small variations in the ground plane that might otherwise be detected
                # by, for example, an IMU. Defaults to false if unspecified.
                two_d_mode: true

                # Use this parameter to provide specify how long the tf listener should wait for a transform to become available.
                # Defaults to 0.0 if unspecified.
                transform_timeout: 0.0

                # If you're having trouble, try setting this to true, and then echo the /diagnostics_agg topic to see if the node is
                # unhappy with any settings or data.
                print_diagnostics: true

                # Debug settings. Not for the faint of heart. Outputs a ludicrous amount of information to the file specified by
                # debug_out_file. I hope you like matrices! Please note that setting this to true will have strongly deleterious
                # effects on the performance of the node. Defaults to false if unspecified.
                debug: false

                # Defaults to "robot_localization_debug.txt" if unspecified. Please specify the full path.
                debug_out_file: ~/sandbox/external-rospacks/src/trinibot_core/scripts/ekf_debug.txt

                # Whether to broadcast the transformation over the /tf topic. Defaults to true if unspecified.
                publish_tf: false

                map_frame: map              # Defaults to "map" if unspecified
                odom_frame: odom            # Defaults to "odom" if unspecified
                base_link_frame: base_link  # Defaults to "base_link" if unspecified
                world_frame: odom           # Defaults to the value of odom_frame if unspecified

                odom0: trinibot/odometry

                # values are
                #x, y, z,
                #roll, pitch, yaw,
                #vx, vy, vz,
                #vroll, vpitch, vyaw,
                #ax, ay, az

                #Note: Seems setting yaw to true causes a NaN failure somewhere
                odom0_config: [true,  true,  false,
                               false, false, true,
                               true, true, false,
                               false, false, true,
                               false, false, false]

                # If you have high-frequency data or are running with a low frequency parameter value, then you may want to increase
                # the size of the subscription queue so that more measurements are fused.
                odom0_queue_size: 10

                imu0: /trinibot_sensors/imu
                imu0_config: [false, false, false,
                              true,  true,  true,
                              false, false , false,
                              true,  true,  true,
                              true,  true,  false]

                imu0_queue_size: 10


        </rosparam>
    </node>

    <node pkg="rviz" type="rviz" name="RViz"   machine="$(arg machine_c2i)" respawn="false" />




</launch>
