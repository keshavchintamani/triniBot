<launch>

    <!-- Setup environment -->
    <arg name="machine_bot" default = "remote"/>
    <arg name="machine_c2i" default = "local"/>
    <arg name="ip_bot" default = "kc-RPi3-mate.local"/>
    <arg name="ip_c2i" default = "kc.local"/>
    <arg name="machine_bot_user" default = "keshavchintamani"/>
    <arg name="machine_c2i_user" default = "kc"/>
    <arg name="depth_camera" default="trinibot/ds525" />
    <!-- Parameters -->
    <!--<param name="target_frame" type="string" value="lazer_frame" />-->
    <param name="ds_camera/publish_tf" type="bool" value="false" />


    <machine name="$(arg machine_c2i)"
             address="$(arg ip_c2i)"
             user="$(arg machine_c2i_user)"
             env-loader="/home/kc/sandbox/external-rospacks/src/trinibot_core/laptop_envloader.sh"
             timeout="10.0"
              >
    </machine>
    <machine name="$(arg machine_bot)"
             address="$(arg ip_bot)"
             user="$(arg machine_bot_user)"
             env-loader="/home/keshavchintamani/trinibot_ws/src/trinibot_core/pi_envloader.sh"
             timeout="10.0"
              >
    </machine>

    <!-- Geometry-->
    <node pkg="trinibot_core" type="tbplatformtransform.py" name="tbplatformtransforms" machine="$(arg machine_bot)" respawn="false" output="screen">
    </node>

    <!-- Camera and Sensors-->
    <!-- Setup the DS525-->
    <node pkg="ros_depthsense_camera" type="depthsense_camera_node" name="trinibot_ds525" machine ="$(arg machine_bot)" respawn="true" output="screen">
        <remap from="/vertex_data" to= "$(arg depth_camera)/vertex_data"  />
        <remap from="/vertex_rgb_data" to= "$(arg depth_camera)/vertex_rgb_data"  />
        <remap from="/rgb_image" to= "$(arg depth_camera)/rgb_image"  />
        <remap from="/depth_image" to= "$(arg depth_camera)/depth_image"  />
        <remap from="/camera_info" to= "$(arg depth_camera)/camera_info"  />
        <remap from="/confidence_image" to= "$(arg depth_camera)/confidence_image"  />
        <remap from="/accelerations" to= "$(arg depth_camera)/accelerations"  />
    </node>
    <!-- imu, compass, temperature and humidity from the sensehat-->
    <node pkg="trinibot_core" type="tbsensehat.py" name="sensehat"  machine="$(arg machine_bot)" respawn="false" />

    <!-- Create a fake laser scan -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">

        <remap from="cloud_in" to="$(arg depth_camera)/vertex_data"/>
        <remap from="scan" to="$(arg depth_camera)/laserscan"/>
        <rosparam>
            target_frame: lazer_frame # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: 0.0
            max_height: 1.0

            angle_min: -1.5708 # -M_PI/2
            angle_max: 1.5708 # M_PI/2
            angle_increment: 0.0087 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 4.0
            use_inf: true

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 3
        </rosparam>

    </node>

    <!-- Motion control-->
    <node pkg="trinibot_core" type="tbmotioncontroller.py" args="/dev/ttyACM0 100 1 1" name="robotcontroller" machine="$(arg machine_bot)" respawn="true" output="screen">
        <remap from="/velocity_cmd" to="/cmd_vel"  />
        <remap from="/string_cmd" to= "/trinibot_gui/string_cmd"  />
    </node>

    <!-- Transforms and Filters-->
    <rosparam command="load" file="$(find trinibot_core)/params/tb_ekf.yaml" />
    <node pkg="robot_localization" type="ekf_localization_node" name="ekf_se" machine="$(arg machine_c2i)" clear_params="false"/>

    <!-- Mapping -->
    <node pkg="gmapping" type="slam_gmapping" name="gmapper"  machine ="$(arg machine_c2i)" respawn="false" output="screen">
        <remap from="scan" to="$(arg depth_camera)/laserscan"/>
        <!--<rosparam>
            For the future
        </rosparam> -->
    </node>

    <!--GUI-->
    <node pkg="trinibot_core" type="tbteleopgui.py" name="teleoperation_gui" machine="$(arg machine_c2i)" respawn="false" output="screen" />
   <!-- <node pkg="image_view" type="image_view" name="image_viewer"  args="image:=/rgb_image _image_transport:=compressed" machine ="$(arg machine_c2i)" respawn="false" output="screen">
        <remap from="image" to="$(arg depth_camera)/rgb_image"/>
        <rosparam>
            image_transport: compressed
        </rosparam>
    </node> -->
     <node pkg="rqt_robot_steering" type="rqt_robot_steering" name="teleoperation" machine="$(arg machine_c2i)" respawn="false" output="screen" />


    <node pkg="rviz" type="rviz" name="RViz"   machine="$(arg machine_c2i)" respawn="false" />

    <!--2D Navigation -->
      <!-- Create a fake laser scan -->
    <node pkg="move_base" type="move_base" name="move_base" output="screen" machine="$(arg machine_c2i)" respawn="false" >
        <remap from="/cmd_vel" to="/trinibot_gui/velocity_cmd"  />
        <remap from="/odom" to="/trinibot/odometry"  />

        <rosparam>
            obstacle_range: 1
            raytrace_range: 1.5
            footprint: [[-0.07, 0.7], [-0.07, -0.07], [0.10, 0.07], [0.10,-0.07]]
            #robot_radius: 0.1
            inflation_radius: 0.2

            observation_sources: laser_scan_sensor

            laser_scan_sensor: {sensor_frame: lazer_frame, data_type: LaserScan, topic: $(arg depth_camera)/laserscan, marking: true, clearing: true}
        </rosparam>

        <rosparam>
            global_costmap:
              global_frame: /map
              robot_base_frame: base_link
              update_frequency: 5.0
              static_map: false
        </rosparam>
        <rosparam>
            local_costmap:
              global_frame: odom
              robot_base_frame: base_link
              update_frequency: 5.0
              publish_frequency: 2.0
              static_map: false
              rolling_window: true
              width: 6.0
              height: 6.0
              resolution: 0.05
        </rosparam>

        <rosparam>
        TrajectoryPlannerROS:
          max_vel_x: 0.15
          min_vel_x: 0.05
          max_vel_theta: 1
          min_in_place_vel_theta: 0.5

          acc_lim_theta: 2
          acc_lim_x: 2
          acc_lim_y: 2

          holonomic_robot: true
        </rosparam>

    </node>




</launch>
<!--args ="-d $HOME/.rviz/default.rviz"-->
<!--GUIs
    <node pkg="ORB_SLAM2" type="Mono" name="orbslam" args="$(find trinibot_core)/settings/ORBVoc.txt $(find trinibot_core)/settings/color-001-ORBSettings.yaml"  machine="$(arg machine_c2i)" respawn="false">
        <remap from="/camera/image_raw" to="trinibot_camera/image_flipped/raw"/>
      </node>
-->